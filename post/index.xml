<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Projects on Thomas Lazarus</title>
    <link>https://lazarust.github.io/Portfolio/post/</link>
    <description>Recent content in Projects on Thomas Lazarus</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 02 Mar 2017 12:00:00 -0500</lastBuildDate>
    
	<atom:link href="https://lazarust.github.io/Portfolio/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>100 Days of Code Days 1-5</title>
      <link>https://lazarust.github.io/Portfolio/post/100days/days_1-5/</link>
      <pubDate>Tue, 04 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://lazarust.github.io/Portfolio/post/100days/days_1-5/</guid>
      <description>I have decided to spend an hour a day for the next 100 days sharpening my skills specifically in the data science and machine learning fields.
For day 1 I decided to read some articles to begin brainstorming ideas for projects for these 200 days. The three articles I read with some key takeaways:
 Open-endedness: The last grand challenge youâ€™ve never heard of  Many current evolutionary algorithms only run for a short time and converge to a solution.</description>
    </item>
    
    <item>
      <title>Book Recommendation using KNN</title>
      <link>https://lazarust.github.io/Portfolio/post/book_recommender/</link>
      <pubDate>Fri, 17 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://lazarust.github.io/Portfolio/post/book_recommender/</guid>
      <description>The purpose of this project was to experiment building a recommendation enginer with a kth-Nearest-Neighbor approach. This can be used in a variety of applications other than a book recommendation such as movie recommendation, music recommendation, shopping recommendation, etc.
The distribution of book ratings can be seen in the below figure.   Based off that distribution I dropped all the records that had less than 250 ratings. After doing this the post-filter amount of ratings per record can be displayed like this:   When building the model I decieded on using a cosine metric and left the algorithim as auto.</description>
    </item>
    
    <item>
      <title>Dog VS Cat</title>
      <link>https://lazarust.github.io/Portfolio/post/dog_vs_cat/</link>
      <pubDate>Wed, 15 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://lazarust.github.io/Portfolio/post/dog_vs_cat/</guid>
      <description>The purpose of this project was to familiarize myself with Tensorflow for image classification. Also switched from running the python from a python file to a jupyter notebook.
The figure below shows the distribution of images with 1 being cat and 0 being dog.
    The accuracy after running the model for 30 epochs was around 82%
  When running this model on a final generated test set 8 out of 10 of the returned values was correct which is expected given the accuracy.</description>
    </item>
    
    <item>
      <title> News Summaries</title>
      <link>https://lazarust.github.io/Portfolio/post/news_summaries/</link>
      <pubDate>Wed, 17 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://lazarust.github.io/Portfolio/post/news_summaries/</guid>
      <description>The purpose of this project is to learn about both abstractive and extractive text summarization using NLP and deep learning.
Extractive  This algorithim can be found in extractive.py. This algorithim works by ranking sentences based off importance and then compiles the top 50% of them.
Abstractive  Attempted to make an abstractive model to summarize the text. Ran into an issue encoding the text for the model.</description>
    </item>
    
    <item>
      <title>Briggs Personality Predictor</title>
      <link>https://lazarust.github.io/Portfolio/post/personality_predictor/</link>
      <pubDate>Wed, 17 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://lazarust.github.io/Portfolio/post/personality_predictor/</guid>
      <description>Used a dataset found on Kaggle that had a personality type and social media posts Using tensorflow and keras created a model to predict a personality given the social media posts. The current highest accuracy is around 20%, so there is definite room for improvement.  Link to Github Repository</description>
    </item>
    
    <item>
      <title>SnakeAI</title>
      <link>https://lazarust.github.io/Portfolio/post/snake/</link>
      <pubDate>Sat, 06 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://lazarust.github.io/Portfolio/post/snake/</guid>
      <description> This project is still a work in progress I have created the game of snake using Python and the pygame library I begin implementing the A* algorithm to find the shortest path to the next snack after each snack is eaten I plan to begin working on a neural network to learn to play the game automatically   Link to Github Repository  </description>
    </item>
    
    <item>
      <title>Database Systems Final Project</title>
      <link>https://lazarust.github.io/Portfolio/post/cis560/</link>
      <pubDate>Fri, 01 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://lazarust.github.io/Portfolio/post/cis560/</guid>
      <description> Collaborated with two other students to create a library application Front-end is written in C# and the database is SQL Allows users to check-in, checkout, and put items on hold   Link to Github Repository  </description>
    </item>
    
    <item>
      <title>Object Oriented Programming Final Project</title>
      <link>https://lazarust.github.io/Portfolio/post/cis400/</link>
      <pubDate>Mon, 27 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://lazarust.github.io/Portfolio/post/cis400/</guid>
      <description> Wrote this project in C# using Object-Oriented techniques to create classes and other data structures Wrote unit tests to test every part of backend code Wrote both a front-end application and web-page using Razor Pages   Link to Github Repository  </description>
    </item>
    
  </channel>
</rss>